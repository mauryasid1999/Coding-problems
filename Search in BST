#define INT_MAX 1000000
#define INT_MIN -10000000

int maximum(BinaryTreeNode<int> *root){
    if(root==NULL){return INT_MIN;}
    
    return max(root->data,max(maximum(root->left),maximum(root->right)));
    
}

int minimum(BinaryTreeNode<int> *root){
    
    if(root==NULL){return INT_MAX;}
    return min(root->data,min(minimum(root->left),minimum(root->right)));
}

bool isBST(BinaryTreeNode<int> *root){
       /* Don't write main().
	* Don't read input, it is passed as function argument.
	* Return output and don't print it.
	* Taking input and printing output is handled automatically.
	*/
    
    if(root==NULL){return true;}
    int leftmax=maximum(root->left);
    int rightmin=minimum(root->right);
    

    bool output=(leftmax<root->data && rightmin>root->data && isBST(root->left)  && isBST(root->right));
        
    return output;    
    
   
    
}


#include <iostream>
#include <queue>

template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
    ~BinaryTreeNode() {
    	if(left) 
       		delete left;
    	if(right) 
       		delete right;
    }
};

using namespace std;
#include "solution.h"

BinaryTreeNode<int>* takeInput() {
    int rootData;
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

int main() {
    BinaryTreeNode<int>* root = takeInput();
    int k;
    cin >> k;
    BinaryTreeNode<int> *ans = searchInBST(root, k);
    if(ans != NULL) {
        cout << ans -> data << endl;
    }
    delete root;
}
