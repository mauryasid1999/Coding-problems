/**************
 
 * Following is BinaryTreeNode class -
 
template <typename T>
class BinaryTreeNode {
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    
    BinaryTreeNode(T data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
 
 * Foloowing is main function which we are using internally

int main(){
    BST *tree = new BST();
    int choice, input;
    while(true){
        cin>>choice;
        switch(choice){
            case 1:
                cin >> input;
                tree->insert(input);
                break;
            case 2:
                cin >> input;
                tree->deleteData(input);
                break;
            case 3:
                cin >> input;
                if(tree->hasData(input)) {
                    cout << "true" << endl;
                }
                else {
                    cout << "false" << endl;
                }
                break;
            default:
                tree->printTree();
                return 0;
                break;
        }
    }
}
*******************/

    
    /******
 
 * Following is BinaryTreeNode class -
 
template <typename T>
class BinaryTreeNode {
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    
    BinaryTreeNode(T data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
 
 * Foloowing is main function which we are using internally

int main(){
    BST *tree = new BST();
    int choice, input;
    while(true){
        cin>>choice;
        switch(choice){
            case 1:
                cin >> input;
                tree->insert(input);
                break;
            case 2:
                cin >> input;
                tree->deleteData(input);
                break;
            case 3:
                cin >> input;
                if(tree->hasData(input)) {
                    cout << "true" << endl;
                }
                else {
                    cout << "false" << endl;
                }
                break;
            default:
                tree->printTree();
                return 0;
                break;
        }
    }
}
*******/

	// Complete this class
    
/**
 
 * Following is BinaryTreeNode class -
 
template <typename T>
class BinaryTreeNode {
public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;
    
    BinaryTreeNode(T data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
 
 * Foloowing is main function which we are using internally

int main(){
    BST *tree = new BST();
    int choice, input;
    while(true){
        cin>>choice;
        switch(choice){
            case 1:
                cin >> input;
                tree->insert(input);
                break;
            case 2:
                cin >> input;
                tree->deleteData(input);
                break;
            case 3:
                cin >> input;
                if(tree->hasData(input)) {
                    cout << "true" << endl;
                }
                else {
                    cout << "false" << endl;
                }
                break;
            default:
                tree->printTree();
                return 0;
                break;
        }
    }
}
***/
#include<climits>
class BST
{
    BinaryTreeNode<int>*root;
    bool hasData(BinaryTreeNode<int>*root, int x)
    {
        if(root==NULL)
            return 0;
        if(root->data==x)
            return 1;
        else if(root->data>x)
            hasData(root->left,x);
        else
            hasData(root->right,x);
    }
    BinaryTreeNode<int>* insert(BinaryTreeNode<int>*root, int x)
    {
        if(root==NULL)
        {
            BinaryTreeNode<int>*y=new BinaryTreeNode<int>(x);
            root=y;
            return root;
        }
        if(x>=root->data)
            root->right=insert(root->right,x);
        else
            root->left=insert(root->left,x);
        return root;
    }
    int minimum(BinaryTreeNode<int>*root)
    {
        if(root==NULL)
            return INT_MAX;
        return min(root->data,min(minimum(root->right),minimum(root->left)));
    }
    BinaryTreeNode<int>* deleteData(BinaryTreeNode<int>*root, int x)
    {
        if(root==NULL)
            return root;
        if(root->data==x)
        {
            if(root->left==NULL && root->right==NULL)
            {
                root=NULL;
            }
            else if(root->left==NULL && root->right!=NULL)
            {
                root=root->right;
            }
            else if(root->left!=NULL && root->right==NULL)
            {
                root=root->left;
            }
            else
            {
                root->data=minimum(root->right);
                root->right=deleteData(root->right,root->data);
            }
            return root;
        }
        if(x>root->data)
        {
            root->right=deleteData(root->right,x);
        }
        else
        {
            root->left=deleteData(root->left,x);            
        }
    }
    void printTree(BinaryTreeNode<int>*root)
    {
        if(root==NULL) 
            return;
        cout<<root->data<<":" ;
        if(root->left!=NULL) 
            cout<<"L:" <<root->left->data<<",";
        if(root->right!=NULL) 
            cout<<"R:" <<root->right->data;
        cout<<endl;
        printTree(root->left);
        printTree(root->right);
    } 
    public:
    BST()
    {
        root==NULL;
    }
    ~BST()
    {
        delete root;
    }
    bool hasData(int x)
    {
        return hasData(root,x);
    }
    void insert(int element)
    {
        root=insert(root,element);
    }
    void deleteData(int x)
    {
        root=deleteData(root,x);
    }
    void printTree()
    {
        printTree(root);
    } 


    
    
};
